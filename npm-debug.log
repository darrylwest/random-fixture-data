0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish', './' ]
2 info using npm@2.1.17
3 info using node@v0.10.35
4 verbose publish [ './' ]
5 silly cache add args [ './', null ]
6 verbose cache add spec ./
7 silly cache add parsed spec { raw: './',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: './',
7 silly cache add   spec: '/Users/dpw/roundpeg/random-fixture-data',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/dpw/.npm/random-fixture-data/2.0.13/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/dpw/.npm/random-fixture-data/2.0.13/package.tgz',
9 verbose tar pack   '/Users/dpw/roundpeg/random-fixture-data' ]
10 verbose tarball /Users/dpw/.npm/random-fixture-data/2.0.13/package.tgz
11 verbose folder /Users/dpw/roundpeg/random-fixture-data
12 info prepublish random-fixture-data@2.0.13
13 verbose addLocalTarball adding from inside cache /Users/dpw/.npm/random-fixture-data/2.0.13/package.tgz
14 silly cache afterAdd random-fixture-data@2.0.13
15 verbose afterAdd /Users/dpw/.npm/random-fixture-data/2.0.13/package/package.json not in flight; writing
16 verbose afterAdd /Users/dpw/.npm/random-fixture-data/2.0.13/package/package.json written
17 silly publish { name: 'random-fixture-data',
17 silly publish   version: '2.0.13',
17 silly publish   description: 'Random fixture data generator cloned from boo1ean/casual by Egor Gumenyuk to provide mixed-case methods that pass jshint tests where camelcase is set to true...',
17 silly publish   main: 'src/casual.js',
17 silly publish   scripts: { test: 'make test' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'https://github.com/darrylwest/random-fixture-data' },
17 silly publish   keywords:
17 silly publish    [ 'faker',
17 silly publish      'fake',
17 silly publish      'data',
17 silly publish      'casual',
17 silly publish      'fixtures',
17 silly publish      'testing',
17 silly publish      'seed',
17 silly publish      'random',
17 silly publish      'mock',
17 silly publish      'mocking',
17 silly publish      'generator' ],
17 silly publish   author: { name: 'Egor Gumenyuk', email: 'boo1ean0807@gmail.com' },
17 silly publish   license: 'MIT',
17 silly publish   dependencies: { moment: '^2.9.0', 'mersenne-twister': '^1.0.1' },
17 silly publish   devDependencies:
17 silly publish    { should: '~4.4.1',
17 silly publish      mocha: '~2.0.1',
17 silly publish      'text-table': '~0.2.0',
17 silly publish      realist: '~0.2.5' },
17 silly publish   readme: '## Random Fixture Data\n\nAdapted from casual\'s fake data generator.  This version creates mixed-case methods that pass jshint tests when camelcase is set to true. New methods are documented below...\n\n[![NPM version](https://badge.fury.io/js/random-fixture-data.svg)](http://badge.fury.io/js/random-fixture-data)\n[![Build Status](https://travis-ci.org/darrylwest/random-fixture-data.png?branch=master)](https://travis-ci.org/darrylwest/random-fixture-data)\n[![Dependency Status](https://david-dm.org/darrylwest/random-fixture-data.svg)](https://david-dm.org/darrylwest/random-fixture-data)\n\n## Installation\n\n> npm install random-fixture-data --save-dev\n\n## Usage\n\n```javascript\nvar data = require(\'random-fixture-data\');\n\n// Generate random sentence\n// You don\'t need function call operator here\n// because most of generators use properties mechanism\nvar sentence = data.sentence;\n\n// Generate random city name\nvar city = data.city;\n\n// Define custom generator\ndata.define(\'point\', function() {\n\treturn {\n\t\tx: Math.random(),\n\t\ty: Math.random()\n\t};\n});\n\n// Generate random point\nvar point = data.point;\n\n// And so on..\n```\n\nRandom Fixture Data uses javascript properties for common generators so you don\'t need to use function call operator\n\n## Embedded generators\n\n```javascript\n\n// Address\n\ncasual.country          // \'United Kingdom\'\ncasual.city             // \'New Ortiz chester\'\ncasual.zip              // \'26995\'\ncasual.street           // \'Jadyn Islands\'\ncasual.address          // \'6390 Tremblay Pines Suite 784\'\ncasual.address1         // \'8417 Veda Circles\'\ncasual.address2         // \'Suite 648\'\ncasual.state            // \'Michigan\'\ncasual.state_abbr       // \'CO\'\ncasual.stateAbbr        // \'CO\'\ncasual.latitude         // 90.0610\ncasual.longitude        // 180.0778\ncasual.building_number  // 2413\ncasual.buildingNumber   // 2413\n\n// Text\n\ncasual.sentence               // \'Laborum eius porro consequatur.\'\ncasual.sentences(n = 3)       // \'Dolorum fuga nobis sit natus consequatur. Laboriosam sapiente. Natus quos ut.\'\ncasual.title                  // \'Systematic nobis\'\ncasual.text                   // \'Nemo tempore natus non accusamus eos placeat nesciunt. et fugit ut odio nisi dolore non ... (long text)\'\ncasual.description            // \'Vel et rerum nostrum quia. Dolorum fuga nobis sit natus consequatur.\'\ncasual.short_description      // \'Qui iste similique iusto.\'\ncasual.shortDescription      // \'Qui iste similique iusto.\'\ncasual.string                 // \'saepe quia molestias voluptates et\'\ncasual.word                   // \'voluptatem\'\ncasual.words(n = 7)           // \'sed quis ut beatae id adipisci aut\'\ncasual.array_of_words(n = 7)  // [ \'voluptas\', \'atque\', \'vitae\', \'vel\', \'dolor\', \'saepe\', \'ut\' ]\ncasual.arrayOfWords(n = 7)  // [ \'voluptas\', \'atque\', \'vitae\', \'vel\', \'dolor\', \'saepe\', \'ut\' ]\ncasual.letter                 // \'k\'\n\n// Internet\n\ncasual.ip      // \'21.44.122.149\'\ncasual.domain  // \'darrion.us\'\ncasual.url     // \'germaine.net\'\ncasual.email   // \'Josue.Hessel@claire.us\'\n\n// Person\n\ncasual.name            // \'Alberto\'\ncasual.username        // \'Darryl\'\ncasual.first_name      // \'Derek\'\ncasual.firstName       // \'Derek\'\ncasual.last_name       // \'Considine\'\ncasual.lastName        // \'Considine\'\ncasual.full_name       // \'Kadin Torphy\'\ncasual.password        // \'(205)580-1350Schumm\'\ncasual.name_prefix     // \'Miss\'\ncasual.namePrefix      // \'Miss\'\ncasual.name_suffix     // \'Jr.\'\ncasual.nameSuffix      // \'Jr.\'\ncasual.company_name    // \'Cole, Wuckert and Strosin\'\ncasual.companyName     // \'Cole, Wuckert and Strosin\'\ncasual.company_suffix  // \'Inc\'\ncasual.companySuffix   // \'Inc\'\ncasual.catch_phrase    // \'Synchronised optimal concept\'\ncasual.catchPhrase     // \'Synchronised optimal concept\'\ncasual.phone           // \'380 82 790 25 92\'\n\n// Numbers\n\ncasual.random                            // 0.7171590146608651 (core generator)\ncasual.integer(from = -1000, to = 1000)  // 632\ncasual.double(from = -1000, to = 1000)   // -234.12987444\ncasual.array_of_digits(n = 7)            // [ 4, 8, 3, 1, 7, 6, 6 ]\ncasual.arrayOfDigits(n = 7)              // [ 4, 8, 3, 1, 7, 6, 6 ]\ncasual.array_of_integers(n = 7)          // [ -105, -7, -532, -596, -430, -957, -234 ]\ncasual.arrayOfIntegers(n = 7)            // [ -105, -7, -532, -596, -430, -957, -234 ]\ncasual.arrayOfDoubles(n = 7)             // [ -866.3755785673857, -166.62194719538093, ...]\n\n// Date\n\ncasual.unix_time                    // 659897901\ncasual.moment                       // moment.js object see http://momentjs.com/docs/\ncasual.date(format = \'YYYY-MM-DD\')  // \'2001-07-06\' (see available formatters http://momentjs.com/docs/#/parsing/string-format/)\ncasual.time(format = \'HH:mm:ss\')    // \'03:08:02\' (see available formatters http://momentjs.com/docs/#/parsing/string-format/)\ncasual.century                      // \'IV\'\ncasual.am_pm                        // \'am\'\ncasual.day_of_year                  // 323\ncasual.dayOfYear                    // 323\ncasual.day_of_month                 // 9\ncasual.dayOfMonth                   // 9\ncasual.day_of_week                  // 4\ncasual.dayOfWeek                    // 4\ncasual.month_number                 // 9\ncasual.monthNumber                  // 9\ncasual.month_name                   // \'March\'\ncasual.monthName                    // \'March\'\ncasual.year                         // 1990\ncasual.timezone                     // \'America/Miquelon\'\n\n// Payments\n\ncasual.card_type            // \'American Express\'\ncasual.cardType             // \'American Express\'\ncasual.card_number(vendor)  // \'4716506247152101\' (if no vendor specified then random)\ncasual.cardNumber(vendor)   // \'4716506247152101\' (if no vendor specified then random)\ncasual.card_exp             // \'03/04\'\ncasual.cardExp              // \'03/04\'\ncasual.card_data            // { type: \'MasterCard\', number: \'5307558778577046\', exp: \'04/88\', holder_name: \'Jaron Gibson\' }\ncasual.cardData             // { type: \'MasterCard\', number: \'5307558778577046\', exp: \'04/88\', holder_name: \'Jaron Gibson\' }\n\n// Misc\n\ncasual.country_code    // \'ES\'\ncasual.countryCode     // \'ES\'\ncasual.language_code   // \'ru\'\ncasual.languageCode    // \'ru\'\ncasual.locale          // \'hi_IN\'\ncasual.mime_type       // \'audio/mpeg\'\ncasual.mimeType        // \'audio/mpeg\'\ncasual.file_extension  // \'rtf\'\ncasual.fileExtension   // \'rtf\'\n\n// Colors\n\ncasual.color_name       // \'DarkOliveGreen\'\ncasual.colorName        // \'DarkOliveGreen\'\ncasual.safe_color_name  // \'maroon\'\ncasual.safeColorName    // \'maroon\'\ncasual.rgb_hex          // \'#2e4e1f\'\ncasual.rgbHex           // \'#2e4e1f\'\ncasual.rgb_array        // [ 194, 193, 166 ]\ncasual.rgbArray         // [ 194, 193, 166 ]\n```\n\n## Define custom generators\n\n```javascript\ncasual.define(\'user\', function() {\n\treturn {\n\t\temail: casual.email,\n\t\tfirstname: casual.first_name,\n\t\tlastname: casual.last_name,\n\t\tpassword: casual.password\n\t};\n});\n\n// Generate object with randomly generated fields\nvar user = casual.user;\n```\n\nIf you want to pass some params to your generator:\n\n```javascript\ncasual.define(\'profile\', function(type) {\n\treturn {\n\t\ttitle: casual.title,\n\t\tdescription: casual.description,\n\t\ttype: type || \'private\'\n\t};\n});\n\n// Generate object with random data\nvar profile = casual.profile(\'public\');\n```\n\nNOTE: if getter function has non-empty arguments list then generator should be called as function `casual.profile(\'public\')`,\notherwise it should be accessed as property `casual.profile`.\n\n## Localization\n\nYou can get localized version of casual generator:\n\n```javascript\nvar casual = require(\'casual\').ru_RU;\ncasual.street; // \'Бухарестская\'\n```\n\nDefault locale is `en_US`.\n\nSee [src/providers/{{locale}}](https://github.com/boo1ean/casual/blob/master/locales.md) for more details about available locales and locale specific generators.\n\nIf you don\'t find necessary locale, please create an issue or just [add it](#contributing) :)\n\n## Helpers\n\n#### random_element\n\nGet random array element\n\n```javascript\nvar item = casual.random_element([\'ball\', \'clock\', \'table\']);\n```\n\n#### random_value\n\nExtract random object value\n\n```javascript\nvar val = casual.random_value({ a: 1, b: 3, c: 42 });\n// val will be equal 1 or 3 or 42\n```\n\n#### random_key\n\nExtract random object key\n\n```javascript\nvar val = casual.random_key({ a: 1, b: 3, c: 42 });\n// val will be equal \'a\' or \'b\' or \'c\'\n```\n\n#### populate\n\nReplace placeholders with generators results\n\n```javascript\ncasual.populate(\'{{email}} {{first_name}}\');\n// \'Dallin.Konopelski@yahoo.com Lyla\'\n```\n\n#### populate_one_of\n\nPick random element from given array and populate it\n\n```javascript\nvar formats = [\'{{first_name}}\', \'{{last_name}} {{city}}\'];\ncasual.populate_one_of(formats);\n\n// Same as\n\ncasual.populate(casual.random_element(formats));\n```\n\n#### numerify\n\nReplace all `#` in string with digits\n\n```javascript\nvar format = \'(##)-00-###-##\';\ncasual.numerify(format); // \'(10)-00-843-32\'\n```\n\n#### define\n\n[See custom generators](#define-custom-generators)\n\n#### register_provider\n\nRegister generators provider\n\n```javascript\nvar words = [\'flexible\', \'great\', \'ok\', \'good\'];\nvar doge_provider = {\n\tsuch: function() {\n\t\treturn \'such \' + casual.random_element(words);\n\t},\n\n\tdoge_phrase: function() {\n\t\treturn \'wow \' + provider.such();\n\t}\n};\n\ncasual.register_provider(doge_provider);\n\ncasual.such;        // \'such good\'\ncasual.doge_phrase; // \'wow such flexible\'\n```\n\n## Seeding\n\nIf you want to use a specific seed in order to get a repeatable random sequence:\n\n```javascript\ncasual.seed(123);\n```\n\nIt uses [Mersenne Twister](https://github.com/boo1ean/mersenne-twister) pseudorandom number generator in core.\n\n## Generators functions\n\nIf you want to pass generator as a callback somewhere or just hate properties you always can access generator **function** at `casual._{generator}`\n\n```javascript\n// Generate value using function\nvar title = casual._title();\n// Same as\nvar title = casual.title;\n\n// Pass generator as callback\nvar array_of = function(times, generator) {\n\tvar result = [];\n\n\tfor (var i = 0; i < times; ++i) {\n\t\tresult.push(generator());\n\t}\n\n\treturn result;\n};\n\n// Will generate array of five random timestamps\nvar array_of_timestamps = array_of(5, casual._unix_time);\n```\n\nOr you can get functional version of casual generator:\n\n```javascript\nvar casual = require(\'casual\').functions();\n\n// Generate title\ncasual.title();\n\n// Generate timestamp\ncasual.unix_time();\n```\n\n## View providers output cli\n\nThere is a simple cli util which could be used to view/debug providers output:\n\n\t# Will render table with columns [generator_name, result] for all providers\n\tnode utils/show.js\n\n\t # Will render table with columns [generator_name, result] only for person provider\n\tnode utils/show.js person\n\n## Contributing\n\n- [Adding new locale](https://github.com/boo1ean/casual/blob/master/locales.md)\n\n# License\n\nHeavily inspired by https://github.com/fzaninotto/Faker\n\nThe MIT License (MIT)\nCopyright (c) 2014 Egor Gumenyuk <boo1ean0807@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\nOR OTHER DEALINGS IN THE SOFTWARE.\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'efb3e9579b39837f7f2a2e56bf9d1a8da8c244d1',
17 silly publish   bugs: { url: 'https://github.com/darrylwest/random-fixture-data/issues' },
17 silly publish   homepage: 'https://github.com/darrylwest/random-fixture-data',
17 silly publish   _id: 'random-fixture-data@2.0.13',
17 silly publish   _shasum: 'f426fa2e7a80f955bddaace4a46a36554cd0763e',
17 silly publish   _from: '.' }
18 silly mapToRegistry name random-fixture-data
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/random-fixture-data
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/dpw/.npm/random-fixture-data/2.0.13/package.tgz
24 verbose request uri https://registry.npmjs.org/random-fixture-data
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 03:49:58
27 verbose request id 85bd9cd064677e3b
28 http request PUT https://registry.npmjs.org/random-fixture-data
29 http 403 https://registry.npmjs.org/random-fixture-data
30 verbose headers { date: 'Mon, 26 Jan 2015 11:49:58 GMT',
30 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
30 verbose headers   'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '17671',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   'x-served-by': 'cache-iad2138-IAD',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1422272998.026802,VS0,VE394',
30 verbose headers   'keep-alive': 'timeout=10, max=50',
30 verbose headers   connection: 'Keep-Alive' }
31 verbose request invalidating /Users/dpw/.npm/registry.npmjs.org/random-fixture-data on PUT
32 error publish Failed PUT 403
33 verbose stack Error: forbidden cannot modify pre-existing version: 2.0.13
33 verbose stack old={"name":"random-fixture-data","version":"2.0.13","description":"Random fixture data generator cloned from boo1ean/casual by Egor Gumenyuk to provide mixed-case methods that pass jshint tests where camelcase is set to true...","main":"src/casual.js","scripts":{"test":"make test"},"repository":{"type":"git","url":"https://github.com/darrylwest/random-fixture-data"},"keywords":["faker","fake","data","casual","fixtures","testing","seed","random","mock","mocking","generator"],"author":{"name":"Egor Gumenyuk","email":"boo1ean0807@gmail.com"},"license":"MIT","dependencies":{"moment":"~2.8.4","mersenne-twister":"~1.0.1"},"devDependencies":{"should":"~4.4.1","mocha":"~2.0.1","text-table":"~0.2.0","realist":"~0.2.5"},"bugs":{"url":"https://github.com/darrylwest/random-fixture-data/issues"},"homepage":"https://github.com/darrylwest/random-fixture-data","_id":"random-fixture-data@2.0.13","dist":{"shasum":"70dd97845b4f3d38340102f6e6af544516609967","tarball":"http://registry.npmjs.org/random-fixture-data/-/random-fixture-data-2.0.13.tgz"},"_from":"./","_npmVersion":"1.4.6","_npmUser":{"name":"darryl.west","email":"darryl.west@raincitysoftware.com"},"maintainers":[{"name":"darryl.west","email":"darryl.west@raincitysoftware.com"}]}
33 verbose stack new={"name":"random-fixture-data","version":"2.0.13","description":"Random fixture data generator cloned from boo1ean/casual by Egor Gumenyuk to provide mixed-case methods that pass jshint tests where camelcase is set to true...","main":"src/casual.js","scripts":{"test":"make test"},"repository":{"type":"git","url":"https://github.com/darrylwest/random-fixture-data"},"keywords":["faker","fake","data","casual","fixtures","testing","seed","random","mock","mocking","generator"],"author":{"name":"Egor Gumenyuk","email":"boo1ean0807@gmail.com"},"license":"MIT","dependencies":{"moment":"^2.9.0","mersenne-twister":"^1.0.1"},"devDependencies":{"should":"~4.4.1","mocha":"~2.0.1","text-table":"~0.2.0","realist":"~0.2.5"},"readme":"## Random Fixture Data\u000a\u000aAdapted from casual's fake data generator.  This version creates mixed-case methods that pass jshint tests when camelcase is set to true. New methods are documented below...\u000a\u000a[![NPM version](https://badge.fury.io/js/random-fixture-data.svg)](http://badge.fury.io/js/random-fixture-data)\u000a[![Build Status](https://travis-ci.org/darrylwest/random-fixture-data.png?branch=master)](https://travis-ci.org/darrylwest/random-fixture-data)\u000a[![Dependency Status](https://david-dm.org/darrylwest/random-fixture-data.svg)](https://david-dm.org/darrylwest/random-fixture-data)\u000a\u000a## Installation\u000a\u000a> npm install random-fixture-data --save-dev\u000a\u000a## Usage\u000a\u000a```javascript\u000avar data = require('random-fixture-data');\u000a\u000a// Generate random sentence\u000a// You don't need function call operator here\u000a// because most of generators use properties mechanism\u000avar sentence = data.sentence;\u000a\u000a// Generate random city name\u000avar city = data.city;\u000a\u000a// Define custom generator\u000adata.define('point', function() {\u000a\u0009return {\u000a\u0009\u0009x: Math.random(),\u000a\u0009\u0009y: Math.random()\u000a\u0009};\u000a});\u000a\u000a// Generate random point\u000avar point = data.point;\u000a\u000a// And so on..\u000a```\u000a\u000aRandom Fixture Data uses javascript properties for common generators so you don't need to use function call operator\u000a\u000a## Embedded generators\u000a\u000a```javascript\u000a\u000a// Address\u000a\u000acasual.country          // 'United Kingdom'\u000acasual.city             // 'New Ortiz chester'\u000acasual.zip              // '26995'\u000acasual.street           // 'Jadyn Islands'\u000acasual.address          // '6390 Tremblay Pines Suite 784'\u000acasual.address1         // '8417 Veda Circles'\u000acasual.address2         // 'Suite 648'\u000acasual.state            // 'Michigan'\u000acasual.state_abbr       // 'CO'\u000acasual.stateAbbr        // 'CO'\u000acasual.latitude         // 90.0610\u000acasual.longitude        // 180.0778\u000acasual.building_number  // 2413\u000acasual.buildingNumber   // 2413\u000a\u000a// Text\u000a\u000acasual.sentence               // 'Laborum eius porro consequatur.'\u000acasual.sentences(n = 3)       // 'Dolorum fuga nobis sit natus consequatur. Laboriosam sapiente. Natus quos ut.'\u000acasual.title                  // 'Systematic nobis'\u000acasual.text                   // 'Nemo tempore natus non accusamus eos placeat nesciunt. et fugit ut odio nisi dolore non ... (long text)'\u000acasual.description            // 'Vel et rerum nostrum quia. Dolorum fuga nobis sit natus consequatur.'\u000acasual.short_description      // 'Qui iste similique iusto.'\u000acasual.shortDescription      // 'Qui iste similique iusto.'\u000acasual.string                 // 'saepe quia molestias voluptates et'\u000acasual.word                   // 'voluptatem'\u000acasual.words(n = 7)           // 'sed quis ut beatae id adipisci aut'\u000acasual.array_of_words(n = 7)  // [ 'voluptas', 'atque', 'vitae', 'vel', 'dolor', 'saepe', 'ut' ]\u000acasual.arrayOfWords(n = 7)  // [ 'voluptas', 'atque', 'vitae', 'vel', 'dolor', 'saepe', 'ut' ]\u000acasual.letter                 // 'k'\u000a\u000a// Internet\u000a\u000acasual.ip      // '21.44.122.149'\u000acasual.domain  // 'darrion.us'\u000acasual.url     // 'germaine.net'\u000acasual.email   // 'Josue.Hessel@claire.us'\u000a\u000a// Person\u000a\u000acasual.name            // 'Alberto'\u000acasual.username        // 'Darryl'\u000acasual.first_name      // 'Derek'\u000acasual.firstName       // 'Derek'\u000acasual.last_name       // 'Considine'\u000acasual.lastName        // 'Considine'\u000acasual.full_name       // 'Kadin Torphy'\u000acasual.password        // '(205)580-1350Schumm'\u000acasual.name_prefix     // 'Miss'\u000acasual.namePrefix      // 'Miss'\u000acasual.name_suffix     // 'Jr.'\u000acasual.nameSuffix      // 'Jr.'\u000acasual.company_name    // 'Cole, Wuckert and Strosin'\u000acasual.companyName     // 'Cole, Wuckert and Strosin'\u000acasual.company_suffix  // 'Inc'\u000acasual.companySuffix   // 'Inc'\u000acasual.catch_phrase    // 'Synchronised optimal concept'\u000acasual.catchPhrase     // 'Synchronised optimal concept'\u000acasual.phone           // '380 82 790 25 92'\u000a\u000a// Numbers\u000a\u000acasual.random                            // 0.7171590146608651 (core generator)\u000acasual.integer(from = -1000, to = 1000)  // 632\u000acasual.double(from = -1000, to = 1000)   // -234.12987444\u000acasual.array_of_digits(n = 7)            // [ 4, 8, 3, 1, 7, 6, 6 ]\u000acasual.arrayOfDigits(n = 7)              // [ 4, 8, 3, 1, 7, 6, 6 ]\u000acasual.array_of_integers(n = 7)          // [ -105, -7, -532, -596, -430, -957, -234 ]\u000acasual.arrayOfIntegers(n = 7)            // [ -105, -7, -532, -596, -430, -957, -234 ]\u000acasual.arrayOfDoubles(n = 7)             // [ -866.3755785673857, -166.62194719538093, ...]\u000a\u000a// Date\u000a\u000acasual.unix_time                    // 659897901\u000acasual.moment                       // moment.js object see http://momentjs.com/docs/\u000acasual.date(format = 'YYYY-MM-DD')  // '2001-07-06' (see available formatters http://momentjs.com/docs/#/parsing/string-format/)\u000acasual.time(format = 'HH:mm:ss')    // '03:08:02' (see available formatters http://momentjs.com/docs/#/parsing/string-format/)\u000acasual.century                      // 'IV'\u000acasual.am_pm                        // 'am'\u000acasual.day_of_year                  // 323\u000acasual.dayOfYear                    // 323\u000acasual.day_of_month                 // 9\u000acasual.dayOfMonth                   // 9\u000acasual.day_of_week                  // 4\u000acasual.dayOfWeek                    // 4\u000acasual.month_number                 // 9\u000acasual.monthNumber                  // 9\u000acasual.month_name                   // 'March'\u000acasual.monthName                    // 'March'\u000acasual.year                         // 1990\u000acasual.timezone                     // 'America/Miquelon'\u000a\u000a// Payments\u000a\u000acasual.card_type            // 'American Express'\u000acasual.cardType             // 'American Express'\u000acasual.card_number(vendor)  // '4716506247152101' (if no vendor specified then random)\u000acasual.cardNumber(vendor)   // '4716506247152101' (if no vendor specified then random)\u000acasual.card_exp             // '03/04'\u000acasual.cardExp              // '03/04'\u000acasual.card_data            // { type: 'MasterCard', number: '5307558778577046', exp: '04/88', holder_name: 'Jaron Gibson' }\u000acasual.cardData             // { type: 'MasterCard', number: '5307558778577046', exp: '04/88', holder_name: 'Jaron Gibson' }\u000a\u000a// Misc\u000a\u000acasual.country_code    // 'ES'\u000acasual.countryCode     // 'ES'\u000acasual.language_code   // 'ru'\u000acasual.languageCode    // 'ru'\u000acasual.locale          // 'hi_IN'\u000acasual.mime_type       // 'audio/mpeg'\u000acasual.mimeType        // 'audio/mpeg'\u000acasual.file_extension  // 'rtf'\u000acasual.fileExtension   // 'rtf'\u000a\u000a// Colors\u000a\u000acasual.color_name       // 'DarkOliveGreen'\u000acasual.colorName        // 'DarkOliveGreen'\u000acasual.safe_color_name  // 'maroon'\u000acasual.safeColorName    // 'maroon'\u000acasual.rgb_hex          // '#2e4e1f'\u000acasual.rgbHex           // '#2e4e1f'\u000acasual.rgb_array        // [ 194, 193, 166 ]\u000acasual.rgbArray         // [ 194, 193, 166 ]\u000a```\u000a\u000a## Define custom generators\u000a\u000a```javascript\u000acasual.define('user', function() {\u000a\u0009return {\u000a\u0009\u0009email: casual.email,\u000a\u0009\u0009firstname: casual.first_name,\u000a\u0009\u0009lastname: casual.last_name,\u000a\u0009\u0009password: casual.password\u000a\u0009};\u000a});\u000a\u000a// Generate object with randomly generated fields\u000avar user = casual.user;\u000a```\u000a\u000aIf you want to pass some params to your generator:\u000a\u000a```javascript\u000acasual.define('profile', function(type) {\u000a\u0009return {\u000a\u0009\u0009title: casual.title,\u000a\u0009\u0009description: casual.description,\u000a\u0009\u0009type: type || 'private'\u000a\u0009};\u000a});\u000a\u000a// Generate object with random data\u000avar profile = casual.profile('public');\u000a```\u000a\u000aNOTE: if getter function has non-empty arguments list then generator should be called as function `casual.profile('public')`,\u000aotherwise it should be accessed as property `casual.profile`.\u000a\u000a## Localization\u000a\u000aYou can get localized version of casual generator:\u000a\u000a```javascript\u000avar casual = require('casual').ru_RU;\u000acasual.street; // 'Бухарестская'\u000a```\u000a\u000aDefault locale is `en_US`.\u000a\u000aSee [src/providers/{{locale}}](https://github.com/boo1ean/casual/blob/master/locales.md) for more details about available locales and locale specific generators.\u000a\u000aIf you don't find necessary locale, please create an issue or just [add it](#contributing) :)\u000a\u000a## Helpers\u000a\u000a#### random_element\u000a\u000aGet random array element\u000a\u000a```javascript\u000avar item = casual.random_element(['ball', 'clock', 'table']);\u000a```\u000a\u000a#### random_value\u000a\u000aExtract random object value\u000a\u000a```javascript\u000avar val = casual.random_value({ a: 1, b: 3, c: 42 });\u000a// val will be equal 1 or 3 or 42\u000a```\u000a\u000a#### random_key\u000a\u000aExtract random object key\u000a\u000a```javascript\u000avar val = casual.random_key({ a: 1, b: 3, c: 42 });\u000a// val will be equal 'a' or 'b' or 'c'\u000a```\u000a\u000a#### populate\u000a\u000aReplace placeholders with generators results\u000a\u000a```javascript\u000acasual.populate('{{email}} {{first_name}}');\u000a// 'Dallin.Konopelski@yahoo.com Lyla'\u000a```\u000a\u000a#### populate_one_of\u000a\u000aPick random element from given array and populate it\u000a\u000a```javascript\u000avar formats = ['{{first_name}}', '{{last_name}} {{city}}'];\u000acasual.populate_one_of(formats);\u000a\u000a// Same as\u000a\u000acasual.populate(casual.random_element(formats));\u000a```\u000a\u000a#### numerify\u000a\u000aReplace all `#` in string with digits\u000a\u000a```javascript\u000avar format = '(##)-00-###-##';\u000acasual.numerify(format); // '(10)-00-843-32'\u000a```\u000a\u000a#### define\u000a\u000a[See custom generators](#define-custom-generators)\u000a\u000a#### register_provider\u000a\u000aRegister generators provider\u000a\u000a```javascript\u000avar words = ['flexible', 'great', 'ok', 'good'];\u000avar doge_provider = {\u000a\u0009such: function() {\u000a\u0009\u0009return 'such ' + casual.random_element(words);\u000a\u0009},\u000a\u000a\u0009doge_phrase: function() {\u000a\u0009\u0009return 'wow ' + provider.such();\u000a\u0009}\u000a};\u000a\u000acasual.register_provider(doge_provider);\u000a\u000acasual.such;        // 'such good'\u000acasual.doge_phrase; // 'wow such flexible'\u000a```\u000a\u000a## Seeding\u000a\u000aIf you want to use a specific seed in order to get a repeatable random sequence:\u000a\u000a```javascript\u000acasual.seed(123);\u000a```\u000a\u000aIt uses [Mersenne Twister](https://github.com/boo1ean/mersenne-twister) pseudorandom number generator in core.\u000a\u000a## Generators functions\u000a\u000aIf you want to pass generator as a callback somewhere or just hate properties you always can access generator **function** at `casual._{generator}`\u000a\u000a```javascript\u000a// Generate value using function\u000avar title = casual._title();\u000a// Same as\u000avar title = casual.title;\u000a\u000a// Pass generator as callback\u000avar array_of = function(times, generator) {\u000a\u0009var result = [];\u000a\u000a\u0009for (var i = 0; i < times; ++i) {\u000a\u0009\u0009result.push(generator());\u000a\u0009}\u000a\u000a\u0009return result;\u000a};\u000a\u000a// Will generate array of five random timestamps\u000avar array_of_timestamps = array_of(5, casual._unix_time);\u000a```\u000a\u000aOr you can get functional version of casual generator:\u000a\u000a```javascript\u000avar casual = require('casual').functions();\u000a\u000a// Generate title\u000acasual.title();\u000a\u000a// Generate timestamp\u000acasual.unix_time();\u000a```\u000a\u000a## View providers output cli\u000a\u000aThere is a simple cli util which could be used to view/debug providers output:\u000a\u000a\u0009# Will render table with columns [generator_name, result] for all providers\u000a\u0009node utils/show.js\u000a\u000a\u0009 # Will render table with columns [generator_name, result] only for person provider\u000a\u0009node utils/show.js person\u000a\u000a## Contributing\u000a\u000a- [Adding new locale](https://github.com/boo1ean/casual/blob/master/locales.md)\u000a\u000a# License\u000a\u000aHeavily inspired by https://github.com/fzaninotto/Faker\u000a\u000aThe MIT License (MIT)\u000aCopyright (c) 2014 Egor Gumenyuk <boo1ean0807@gmail.com>\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining a copy\u000aof this software and associated documentation files (the \"Software\"), to deal\u000ain the Software without restriction, including without limitation the rights\u000ato use, copy, modify, merge, publish, distribute, sublicense, and/or sell\u000acopies of the Software, and to permit persons to whom the Software is\u000afurnished to do so, subject to the following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be included in all\u000acopies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\u000aEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\u000aMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\u000aIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\u000aDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\u000aOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\u000aOR OTHER DEALINGS IN THE SOFTWARE.\u000a","readmeFilename":"README.md","gitHead":"efb3e9579b39837f7f2a2e56bf9d1a8da8c244d1","bugs":{"url":"https://github.com/darrylwest/random-fixture-data/issues"},"homepage":"https://github.com/darrylwest/random-fixture-data","_id":"random-fixture-data@2.0.13","_shasum":"f426fa2e7a80f955bddaace4a46a36554cd0763e","_from":".","_npmVersion":"2.1.17","_nodeVersion":"0.10.35","_npmUser":{"name":"darryl.west","email":"darryl.west@raincitysoftware.com"},"maintainers":[{"name":"darryl.west","email":"darryl.west@raincitysoftware.com"}],"dist":{"shasum":"f426fa2e7a80f955bddaace4a46a36554cd0763e","tarball":"http://registry.npmjs.org/random-fixture-data/-/random-fixture-data-2.0.13.tgz"}}: random-fixture-data
33 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:244:14)
33 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
33 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:373:22)
33 verbose stack     at Request.emit (events.js:98:17)
33 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1318:14)
33 verbose stack     at Request.emit (events.js:117:20)
33 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1266:12)
33 verbose stack     at IncomingMessage.emit (events.js:117:20)
33 verbose stack     at _stream_readable.js:944:16
33 verbose stack     at process._tickCallback (node.js:442:13)
34 verbose statusCode 403
35 verbose pkgid random-fixture-data
36 verbose cwd /Users/dpw/roundpeg/random-fixture-data
37 error Darwin 14.0.0
38 error argv "node" "/usr/local/bin/npm" "publish" "./"
39 error node v0.10.35
40 error npm  v2.1.17
41 error code E403
42 error forbidden cannot modify pre-existing version: 2.0.13
42 error old={"name":"random-fixture-data","version":"2.0.13","description":"Random fixture data generator cloned from boo1ean/casual by Egor Gumenyuk to provide mixed-case methods that pass jshint tests where camelcase is set to true...","main":"src/casual.js","scripts":{"test":"make test"},"repository":{"type":"git","url":"https://github.com/darrylwest/random-fixture-data"},"keywords":["faker","fake","data","casual","fixtures","testing","seed","random","mock","mocking","generator"],"author":{"name":"Egor Gumenyuk","email":"boo1ean0807@gmail.com"},"license":"MIT","dependencies":{"moment":"~2.8.4","mersenne-twister":"~1.0.1"},"devDependencies":{"should":"~4.4.1","mocha":"~2.0.1","text-table":"~0.2.0","realist":"~0.2.5"},"bugs":{"url":"https://github.com/darrylwest/random-fixture-data/issues"},"homepage":"https://github.com/darrylwest/random-fixture-data","_id":"random-fixture-data@2.0.13","dist":{"shasum":"70dd97845b4f3d38340102f6e6af544516609967","tarball":"http://registry.npmjs.org/random-fixture-data/-/random-fixture-data-2.0.13.tgz"},"_from":"./","_npmVersion":"1.4.6","_npmUser":{"name":"darryl.west","email":"darryl.west@raincitysoftware.com"},"maintainers":[{"name":"darryl.west","email":"darryl.west@raincitysoftware.com"}]}
42 error new={"name":"random-fixture-data","version":"2.0.13","description":"Random fixture data generator cloned from boo1ean/casual by Egor Gumenyuk to provide mixed-case methods that pass jshint tests where camelcase is set to true...","main":"src/casual.js","scripts":{"test":"make test"},"repository":{"type":"git","url":"https://github.com/darrylwest/random-fixture-data"},"keywords":["faker","fake","data","casual","fixtures","testing","seed","random","mock","mocking","generator"],"author":{"name":"Egor Gumenyuk","email":"boo1ean0807@gmail.com"},"license":"MIT","dependencies":{"moment":"^2.9.0","mersenne-twister":"^1.0.1"},"devDependencies":{"should":"~4.4.1","mocha":"~2.0.1","text-table":"~0.2.0","realist":"~0.2.5"},"readme":"## Random Fixture Data\u000a\u000aAdapted from casual's fake data generator.  This version creates mixed-case methods that pass jshint tests when camelcase is set to true. New methods are documented below...\u000a\u000a[![NPM version](https://badge.fury.io/js/random-fixture-data.svg)](http://badge.fury.io/js/random-fixture-data)\u000a[![Build Status](https://travis-ci.org/darrylwest/random-fixture-data.png?branch=master)](https://travis-ci.org/darrylwest/random-fixture-data)\u000a[![Dependency Status](https://david-dm.org/darrylwest/random-fixture-data.svg)](https://david-dm.org/darrylwest/random-fixture-data)\u000a\u000a## Installation\u000a\u000a> npm install random-fixture-data --save-dev\u000a\u000a## Usage\u000a\u000a```javascript\u000avar data = require('random-fixture-data');\u000a\u000a// Generate random sentence\u000a// You don't need function call operator here\u000a// because most of generators use properties mechanism\u000avar sentence = data.sentence;\u000a\u000a// Generate random city name\u000avar city = data.city;\u000a\u000a// Define custom generator\u000adata.define('point', function() {\u000a\u0009return {\u000a\u0009\u0009x: Math.random(),\u000a\u0009\u0009y: Math.random()\u000a\u0009};\u000a});\u000a\u000a// Generate random point\u000avar point = data.point;\u000a\u000a// And so on..\u000a```\u000a\u000aRandom Fixture Data uses javascript properties for common generators so you don't need to use function call operator\u000a\u000a## Embedded generators\u000a\u000a```javascript\u000a\u000a// Address\u000a\u000acasual.country          // 'United Kingdom'\u000acasual.city             // 'New Ortiz chester'\u000acasual.zip              // '26995'\u000acasual.street           // 'Jadyn Islands'\u000acasual.address          // '6390 Tremblay Pines Suite 784'\u000acasual.address1         // '8417 Veda Circles'\u000acasual.address2         // 'Suite 648'\u000acasual.state            // 'Michigan'\u000acasual.state_abbr       // 'CO'\u000acasual.stateAbbr        // 'CO'\u000acasual.latitude         // 90.0610\u000acasual.longitude        // 180.0778\u000acasual.building_number  // 2413\u000acasual.buildingNumber   // 2413\u000a\u000a// Text\u000a\u000acasual.sentence               // 'Laborum eius porro consequatur.'\u000acasual.sentences(n = 3)       // 'Dolorum fuga nobis sit natus consequatur. Laboriosam sapiente. Natus quos ut.'\u000acasual.title                  // 'Systematic nobis'\u000acasual.text                   // 'Nemo tempore natus non accusamus eos placeat nesciunt. et fugit ut odio nisi dolore non ... (long text)'\u000acasual.description            // 'Vel et rerum nostrum quia. Dolorum fuga nobis sit natus consequatur.'\u000acasual.short_description      // 'Qui iste similique iusto.'\u000acasual.shortDescription      // 'Qui iste similique iusto.'\u000acasual.string                 // 'saepe quia molestias voluptates et'\u000acasual.word                   // 'voluptatem'\u000acasual.words(n = 7)           // 'sed quis ut beatae id adipisci aut'\u000acasual.array_of_words(n = 7)  // [ 'voluptas', 'atque', 'vitae', 'vel', 'dolor', 'saepe', 'ut' ]\u000acasual.arrayOfWords(n = 7)  // [ 'voluptas', 'atque', 'vitae', 'vel', 'dolor', 'saepe', 'ut' ]\u000acasual.letter                 // 'k'\u000a\u000a// Internet\u000a\u000acasual.ip      // '21.44.122.149'\u000acasual.domain  // 'darrion.us'\u000acasual.url     // 'germaine.net'\u000acasual.email   // 'Josue.Hessel@claire.us'\u000a\u000a// Person\u000a\u000acasual.name            // 'Alberto'\u000acasual.username        // 'Darryl'\u000acasual.first_name      // 'Derek'\u000acasual.firstName       // 'Derek'\u000acasual.last_name       // 'Considine'\u000acasual.lastName        // 'Considine'\u000acasual.full_name       // 'Kadin Torphy'\u000acasual.password        // '(205)580-1350Schumm'\u000acasual.name_prefix     // 'Miss'\u000acasual.namePrefix      // 'Miss'\u000acasual.name_suffix     // 'Jr.'\u000acasual.nameSuffix      // 'Jr.'\u000acasual.company_name    // 'Cole, Wuckert and Strosin'\u000acasual.companyName     // 'Cole, Wuckert and Strosin'\u000acasual.company_suffix  // 'Inc'\u000acasual.companySuffix   // 'Inc'\u000acasual.catch_phrase    // 'Synchronised optimal concept'\u000acasual.catchPhrase     // 'Synchronised optimal concept'\u000acasual.phone           // '380 82 790 25 92'\u000a\u000a// Numbers\u000a\u000acasual.random                            // 0.7171590146608651 (core generator)\u000acasual.integer(from = -1000, to = 1000)  // 632\u000acasual.double(from = -1000, to = 1000)   // -234.12987444\u000acasual.array_of_digits(n = 7)            // [ 4, 8, 3, 1, 7, 6, 6 ]\u000acasual.arrayOfDigits(n = 7)              // [ 4, 8, 3, 1, 7, 6, 6 ]\u000acasual.array_of_integers(n = 7)          // [ -105, -7, -532, -596, -430, -957, -234 ]\u000acasual.arrayOfIntegers(n = 7)            // [ -105, -7, -532, -596, -430, -957, -234 ]\u000acasual.arrayOfDoubles(n = 7)             // [ -866.3755785673857, -166.62194719538093, ...]\u000a\u000a// Date\u000a\u000acasual.unix_time                    // 659897901\u000acasual.moment                       // moment.js object see http://momentjs.com/docs/\u000acasual.date(format = 'YYYY-MM-DD')  // '2001-07-06' (see available formatters http://momentjs.com/docs/#/parsing/string-format/)\u000acasual.time(format = 'HH:mm:ss')    // '03:08:02' (see available formatters http://momentjs.com/docs/#/parsing/string-format/)\u000acasual.century                      // 'IV'\u000acasual.am_pm                        // 'am'\u000acasual.day_of_year                  // 323\u000acasual.dayOfYear                    // 323\u000acasual.day_of_month                 // 9\u000acasual.dayOfMonth                   // 9\u000acasual.day_of_week                  // 4\u000acasual.dayOfWeek                    // 4\u000acasual.month_number                 // 9\u000acasual.monthNumber                  // 9\u000acasual.month_name                   // 'March'\u000acasual.monthName                    // 'March'\u000acasual.year                         // 1990\u000acasual.timezone                     // 'America/Miquelon'\u000a\u000a// Payments\u000a\u000acasual.card_type            // 'American Express'\u000acasual.cardType             // 'American Express'\u000acasual.card_number(vendor)  // '4716506247152101' (if no vendor specified then random)\u000acasual.cardNumber(vendor)   // '4716506247152101' (if no vendor specified then random)\u000acasual.card_exp             // '03/04'\u000acasual.cardExp              // '03/04'\u000acasual.card_data            // { type: 'MasterCard', number: '5307558778577046', exp: '04/88', holder_name: 'Jaron Gibson' }\u000acasual.cardData             // { type: 'MasterCard', number: '5307558778577046', exp: '04/88', holder_name: 'Jaron Gibson' }\u000a\u000a// Misc\u000a\u000acasual.country_code    // 'ES'\u000acasual.countryCode     // 'ES'\u000acasual.language_code   // 'ru'\u000acasual.languageCode    // 'ru'\u000acasual.locale          // 'hi_IN'\u000acasual.mime_type       // 'audio/mpeg'\u000acasual.mimeType        // 'audio/mpeg'\u000acasual.file_extension  // 'rtf'\u000acasual.fileExtension   // 'rtf'\u000a\u000a// Colors\u000a\u000acasual.color_name       // 'DarkOliveGreen'\u000acasual.colorName        // 'DarkOliveGreen'\u000acasual.safe_color_name  // 'maroon'\u000acasual.safeColorName    // 'maroon'\u000acasual.rgb_hex          // '#2e4e1f'\u000acasual.rgbHex           // '#2e4e1f'\u000acasual.rgb_array        // [ 194, 193, 166 ]\u000acasual.rgbArray         // [ 194, 193, 166 ]\u000a```\u000a\u000a## Define custom generators\u000a\u000a```javascript\u000acasual.define('user', function() {\u000a\u0009return {\u000a\u0009\u0009email: casual.email,\u000a\u0009\u0009firstname: casual.first_name,\u000a\u0009\u0009lastname: casual.last_name,\u000a\u0009\u0009password: casual.password\u000a\u0009};\u000a});\u000a\u000a// Generate object with randomly generated fields\u000avar user = casual.user;\u000a```\u000a\u000aIf you want to pass some params to your generator:\u000a\u000a```javascript\u000acasual.define('profile', function(type) {\u000a\u0009return {\u000a\u0009\u0009title: casual.title,\u000a\u0009\u0009description: casual.description,\u000a\u0009\u0009type: type || 'private'\u000a\u0009};\u000a});\u000a\u000a// Generate object with random data\u000avar profile = casual.profile('public');\u000a```\u000a\u000aNOTE: if getter function has non-empty arguments list then generator should be called as function `casual.profile('public')`,\u000aotherwise it should be accessed as property `casual.profile`.\u000a\u000a## Localization\u000a\u000aYou can get localized version of casual generator:\u000a\u000a```javascript\u000avar casual = require('casual').ru_RU;\u000acasual.street; // 'Бухарестская'\u000a```\u000a\u000aDefault locale is `en_US`.\u000a\u000aSee [src/providers/{{locale}}](https://github.com/boo1ean/casual/blob/master/locales.md) for more details about available locales and locale specific generators.\u000a\u000aIf you don't find necessary locale, please create an issue or just [add it](#contributing) :)\u000a\u000a## Helpers\u000a\u000a#### random_element\u000a\u000aGet random array element\u000a\u000a```javascript\u000avar item = casual.random_element(['ball', 'clock', 'table']);\u000a```\u000a\u000a#### random_value\u000a\u000aExtract random object value\u000a\u000a```javascript\u000avar val = casual.random_value({ a: 1, b: 3, c: 42 });\u000a// val will be equal 1 or 3 or 42\u000a```\u000a\u000a#### random_key\u000a\u000aExtract random object key\u000a\u000a```javascript\u000avar val = casual.random_key({ a: 1, b: 3, c: 42 });\u000a// val will be equal 'a' or 'b' or 'c'\u000a```\u000a\u000a#### populate\u000a\u000aReplace placeholders with generators results\u000a\u000a```javascript\u000acasual.populate('{{email}} {{first_name}}');\u000a// 'Dallin.Konopelski@yahoo.com Lyla'\u000a```\u000a\u000a#### populate_one_of\u000a\u000aPick random element from given array and populate it\u000a\u000a```javascript\u000avar formats = ['{{first_name}}', '{{last_name}} {{city}}'];\u000acasual.populate_one_of(formats);\u000a\u000a// Same as\u000a\u000acasual.populate(casual.random_element(formats));\u000a```\u000a\u000a#### numerify\u000a\u000aReplace all `#` in string with digits\u000a\u000a```javascript\u000avar format = '(##)-00-###-##';\u000acasual.numerify(format); // '(10)-00-843-32'\u000a```\u000a\u000a#### define\u000a\u000a[See custom generators](#define-custom-generators)\u000a\u000a#### register_provider\u000a\u000aRegister generators provider\u000a\u000a```javascript\u000avar words = ['flexible', 'great', 'ok', 'good'];\u000avar doge_provider = {\u000a\u0009such: function() {\u000a\u0009\u0009return 'such ' + casual.random_element(words);\u000a\u0009},\u000a\u000a\u0009doge_phrase: function() {\u000a\u0009\u0009return 'wow ' + provider.such();\u000a\u0009}\u000a};\u000a\u000acasual.register_provider(doge_provider);\u000a\u000acasual.such;        // 'such good'\u000acasual.doge_phrase; // 'wow such flexible'\u000a```\u000a\u000a## Seeding\u000a\u000aIf you want to use a specific seed in order to get a repeatable random sequence:\u000a\u000a```javascript\u000acasual.seed(123);\u000a```\u000a\u000aIt uses [Mersenne Twister](https://github.com/boo1ean/mersenne-twister) pseudorandom number generator in core.\u000a\u000a## Generators functions\u000a\u000aIf you want to pass generator as a callback somewhere or just hate properties you always can access generator **function** at `casual._{generator}`\u000a\u000a```javascript\u000a// Generate value using function\u000avar title = casual._title();\u000a// Same as\u000avar title = casual.title;\u000a\u000a// Pass generator as callback\u000avar array_of = function(times, generator) {\u000a\u0009var result = [];\u000a\u000a\u0009for (var i = 0; i < times; ++i) {\u000a\u0009\u0009result.push(generator());\u000a\u0009}\u000a\u000a\u0009return result;\u000a};\u000a\u000a// Will generate array of five random timestamps\u000avar array_of_timestamps = array_of(5, casual._unix_time);\u000a```\u000a\u000aOr you can get functional version of casual generator:\u000a\u000a```javascript\u000avar casual = require('casual').functions();\u000a\u000a// Generate title\u000acasual.title();\u000a\u000a// Generate timestamp\u000acasual.unix_time();\u000a```\u000a\u000a## View providers output cli\u000a\u000aThere is a simple cli util which could be used to view/debug providers output:\u000a\u000a\u0009# Will render table with columns [generator_name, result] for all providers\u000a\u0009node utils/show.js\u000a\u000a\u0009 # Will render table with columns [generator_name, result] only for person provider\u000a\u0009node utils/show.js person\u000a\u000a## Contributing\u000a\u000a- [Adding new locale](https://github.com/boo1ean/casual/blob/master/locales.md)\u000a\u000a# License\u000a\u000aHeavily inspired by https://github.com/fzaninotto/Faker\u000a\u000aThe MIT License (MIT)\u000aCopyright (c) 2014 Egor Gumenyuk <boo1ean0807@gmail.com>\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining a copy\u000aof this software and associated documentation files (the \"Software\"), to deal\u000ain the Software without restriction, including without limitation the rights\u000ato use, copy, modify, merge, publish, distribute, sublicense, and/or sell\u000acopies of the Software, and to permit persons to whom the Software is\u000afurnished to do so, subject to the following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be included in all\u000acopies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\u000aEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\u000aMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\u000aIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\u000aDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\u000aOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\u000aOR OTHER DEALINGS IN THE SOFTWARE.\u000a","readmeFilename":"README.md","gitHead":"efb3e9579b39837f7f2a2e56bf9d1a8da8c244d1","bugs":{"url":"https://github.com/darrylwest/random-fixture-data/issues"},"homepage":"https://github.com/darrylwest/random-fixture-data","_id":"random-fixture-data@2.0.13","_shasum":"f426fa2e7a80f955bddaace4a46a36554cd0763e","_from":".","_npmVersion":"2.1.17","_nodeVersion":"0.10.35","_npmUser":{"name":"darryl.west","email":"darryl.west@raincitysoftware.com"},"maintainers":[{"name":"darryl.west","email":"darryl.west@raincitysoftware.com"}],"dist":{"shasum":"f426fa2e7a80f955bddaace4a46a36554cd0763e","tarball":"http://registry.npmjs.org/random-fixture-data/-/random-fixture-data-2.0.13.tgz"}}: random-fixture-data
43 error If you need help, you may report this error at:
43 error     <http://github.com/npm/npm/issues>
44 verbose exit [ 1, true ]
